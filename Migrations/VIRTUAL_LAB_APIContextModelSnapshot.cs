// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VIRTUAL_LAB_API.Data;

#nullable disable

namespace VIRTUAL_LAB_API.Migrations
{
    [DbContext(typeof(VIRTUAL_LAB_APIContext))]
    partial class VIRTUAL_LAB_APIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SQ_CourseNumbers");

            modelBuilder.HasSequence<int>("SQ_DegreeNumbers");

            modelBuilder.HasSequence<int>("SQ_EducationalMaterialNumbers");

            modelBuilder.HasSequence<int>("SQ_SpecialtyNumbers");

            modelBuilder.HasSequence<int>("SQ_StudentCourseStatisticNumbers");

            modelBuilder.HasSequence<int>("SQ_StudentTaskAttemptNumbers");

            modelBuilder.HasSequence<int>("SQ_StudentTaskStatisticNumbers");

            modelBuilder.HasSequence<int>("SQ_TaskNumbers");

            modelBuilder.HasSequence<int>("SQ_UserNumbers");

            modelBuilder.HasSequence<int>("SQ_UserRoleNumbers");

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("StudentStudentDegree", b =>
                {
                    b.Property<int>("StudentDegreesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("StudentDegreesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentStudentDegree");
                });

            modelBuilder.Entity("TeacherTeacherDegree", b =>
                {
                    b.Property<int>("TeacherDegreeId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("TeacherDegreeId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("TeacherTeacherDegree");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_CourseNumbers");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_DegreeNumbers");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DegreeNameId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeNameId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Degree");

                    b.HasDiscriminator().HasValue("Degree");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.DegreeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DegreeName");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.EducationalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_EducationalMaterialNumbers");

                    b.Property<string>("CloudDriveAttachedFileURLs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("EducationalMaterial");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_SpecialtyNumbers");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentCourseStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_StudentCourseStatisticNumbers");

                    b.Property<double>("CompletionRate")
                        .HasColumnType("float");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("GeneralCourseRate")
                        .HasColumnType("float");

                    b.Property<double>("MarkRate")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<double>("TimeRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseStatistic");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentTaskAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_StudentTaskAttemptNumbers");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("StudentDataJSON")
                        .IsRequired()
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.ToTable("StudentTaskAttempt");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentTaskStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_StudentTaskStatisticNumbers");

                    b.Property<double>("GeneralCourseRate")
                        .HasColumnType("float");

                    b.Property<double>("MarkRate")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<double>("TimeRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.ToTable("StudentTaskStatistic");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_TaskNumbers");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DataJSON")
                        .IsRequired()
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_UserNumbers");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR SQ_UserRoleNumbers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentDegree", b =>
                {
                    b.HasBaseType("VIRTUAL_LAB_API.Model.Degree");

                    b.HasDiscriminator().HasValue("StudentDegree");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.TeacherDegree", b =>
                {
                    b.HasBaseType("VIRTUAL_LAB_API.Model.Degree");

                    b.HasDiscriminator().HasValue("TeacherDegree");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Administrator", b =>
                {
                    b.HasBaseType("VIRTUAL_LAB_API.Model.User");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Student", b =>
                {
                    b.HasBaseType("VIRTUAL_LAB_API.Model.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Teacher", b =>
                {
                    b.HasBaseType("VIRTUAL_LAB_API.Model.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentStudentDegree", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.StudentDegree", null)
                        .WithMany()
                        .HasForeignKey("StudentDegreesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherTeacherDegree", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.TeacherDegree", null)
                        .WithMany()
                        .HasForeignKey("TeacherDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Degree", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.DegreeName", "DegreeName")
                        .WithMany()
                        .HasForeignKey("DegreeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeName");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.EducationalMaterial", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Course", "Course")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentCourseStatistic", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Student", "Student")
                        .WithMany("StudentCourseStatistics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentTaskAttempt", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Student", "Student")
                        .WithMany("StudentTaskAttempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Task", "Task")
                        .WithMany("StudentTaskAttempts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.StudentTaskStatistic", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Student", "Student")
                        .WithMany("StudentTaskStatistics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIRTUAL_LAB_API.Model.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Task", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.Course", "Course")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.User", b =>
                {
                    b.HasOne("VIRTUAL_LAB_API.Model.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Course", b =>
                {
                    b.Navigation("EducationalMaterials");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Task", b =>
                {
                    b.Navigation("StudentTaskAttempts");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VIRTUAL_LAB_API.Model.Student", b =>
                {
                    b.Navigation("StudentCourseStatistics");

                    b.Navigation("StudentTaskAttempts");

                    b.Navigation("StudentTaskStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
